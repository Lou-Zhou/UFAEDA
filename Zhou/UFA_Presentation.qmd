---
title: "Examining Throwing Tendencies Throughout the Ultimate Frisbee Association(UFA)"
editor: visual
author: Isabella Ferrandiz, Tai Fowler, Lou Zhou
format:
  revealjs: 
    embed-resources: true
    slide-number: true
    preview-links: auto
    footer: Project 2 - Isabella Ferrandiz, Tai Fowler, Lou Zhou
server: shiny
---

```{r imports}
#| context: setup
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(ggplot2)
library(cluster)
library(RColorBrewer)
library(dslabs)
library(ggrepel)
library(patchwork)
library(factoextra)
ufa_throws <- read_csv("https://raw.githubusercontent.com/36-SURE/2025/main/data/ufa_throws.csv")
drawEndLocs <- function(successful = "Both", player = "Keep All", scoring = FALSE, showContour = TRUE, showPoints = FALSE){
plot_ufa_throws <- ufa_throws
title = "End Locations of Passes in UFA League"
title = ""
if(successful == "True"){
  title = paste(title, "| Successful Passes")
}
if(successful == "False"){
  title = paste(title, "| Failed Passes")
}
if(player != "Keep All"){
  title = paste(title, "| Player", player)
}
if(!scoring){
  title = paste("Scoring Attempts")
}
if(scoring){
  title = paste("Non-Scoring Attempts")
}


plot_ufa_throws <- ufa_throws |> 
  dplyr::filter(
    (successful != "True" | turnover == 0),
    (successful != "False" | turnover == 1),
    (player == "Keep All" | thrower == player),
    (scoring | receiver_y >= 100),
    (!scoring | receiver_y < 100)
  )
plot <- ggplot() + theme_classic() + 
  coord_fixed(ratio = field_width / (field_height + 40)) +
  labs(title = title,
       caption = "Data Courtesy Ultimate Frisbee Association(UFA)"
       ) +
  xlab("X Position") + ylab("Y Position") +
  theme(plot.title = element_text(hjust = 0.5)) + 
  geom_segment(data = segment_data, aes(x = x, y = y, xend = xend, yend = yend))
if (showContour & nrow(plot_ufa_throws) > 0) {
  #if want to see contour
  plot <- plot +
  stat_density_2d(data = plot_ufa_throws, 
                  mapping = aes(x = receiver_x_flipped, y = receiver_y, fill = after_stat(level)), 
                  geom = "polygon", 
                  contour = TRUE, 
                  colour = "black") +
  scale_fill_distiller(name = "Density", palette = "Blues", direction = 1)
}
if (showPoints) {
  #if want to see end locations
  plot <- plot + geom_point(
    data = plot_ufa_throws,
    aes(x = receiver_x_flipped, y = receiver_y, shape = factor(turnover), color = factor(turnover)),
    size = 2, alpha = .6
  ) + scale_shape_manual(
    values = c("0" = 1, "1" = 4),
    labels = c("0" = "Complete", "1" = "Incomplete"),
    name = "Throw Result"
  ) + scale_color_manual(
      values = c("0" = "darkgreen", "1" = "darkred"),
      labels = c("0" = "Complete", "1" = "Incomplete"),
      name = "Throw Result"
    )  + guides(color = guide_legend(title = "Throw Result"), 
               shape = guide_legend(title = "Throw Result"))
} 
plot
}
getThrwerData <- function(successful, player,distanceBounds = c(0, 100) ) {
  player_data <- ufa_throws
  player_data <- player_data |> 
    dplyr::filter(
      (successful != "True" | turnover == 0),
      (successful != "False" | turnover == 1),
      (player == "Keep All" | thrower == player),
      (thrower_y < (100 - distanceBounds[1]) & thrower_y > (100 -distanceBounds[2]))
    )
  total = nrow(player_data)
  completion = 1 - mean(player_data$turnover)
  paste0("<b>Completion Percentage:</b> ", round(completion, 5), "<br> <b>Number of Throws:</b> ", total)
}
field_width = 53 + 1/3
field_height = 80
ufa_throws <- ufa_throws |>
  dplyr::mutate(receiver_x_flipped = -receiver_x) 
thrower_data <- ufa_throws |> dplyr::group_by(thrower) |>
  dplyr::summarise(total = n()) |> dplyr::filter(total > 50)
allThrowers = head(unique(thrower_data$thrower), 500)
segment_data = data.frame(
  x = c( -field_width / 2, field_width / 2, -field_width / 2, -field_width / 2,
         -field_width / 2, -field_width / 2),
  xend = c( -field_width / 2, field_width / 2, field_width / 2, field_width / 2,
            field_width / 2, field_width / 2 ), 
  y = c(-20, -20, -20, 100, 120, 0),
  yend = c(120, 120, -20, 100, 120, 0)
)
brick_points = data.frame(
  x = c(0, 0),
  y = c(20, 50)
)
```

## Motivation

::: fragment
-   Ultimate Frisbee - similar to American(Gridiron) Football

    -   Scoring by passing disc to teammate in opponent's end zone

    -   Cannot move while holding disc

    -   Turnovers from interceptions, incompletions, and out of bound passes
:::

::: fragment
-   Strong growth of a professional environment with dedicated leagues and athletes

    -   Advanced analytics still relatively novel
    
:::

## Data Overview {.smaller}

::::: columns
::: {.column width="50%"}
```{r, fig.width=8, fig.height=8}
ufa_throws |> dplyr::filter(gameID == "2021-06-04-MIN-MAD", possession_num == 4) |> dplyr::slice_tail(n = 10) |>
  ggplot() + theme_classic() + 
  coord_fixed(ratio = field_width / (field_height + 40)) +
  labs(title = "Game 2021-06-04-MIN-MAD, Possession 4",
       caption = "Data Courtesy Ultimate Frisbee Association(UFA)"
  ) + xlab("X Position") + ylab("Y Position") +
  theme(plot.title = element_text(hjust = 0.5)) + 
  geom_segment(aes(x = thrower_x, y = thrower_y, xend = receiver_x, yend = receiver_y),  arrow = arrow(type="closed", length=unit(0.5,"mm"))
  ) + geom_segment(data = segment_data, aes(x = x, y = y, xend = xend, yend = yend))
```
:::

::: {.column width="50%"}
-   Throwing Data Provided by the Ultimate Frisbee Association(UFA), 2021 - 2024
    -   Per Throw Basis
    -   Physical Throw Data
        -   Start and End locations, success status, throw distance and angle
    -   Thrower and Recipient Data
        -   Player IDs, Team IDs,
    -   Game State
        -   Score, Time Left, Quarter, Possession Number
:::
:::::

## Outside of Scoring Attempts, Players Tend to Throw Towards the Middle

```{r}
drawEndLocs(successful = "Both", player = "Keep All", scoring = TRUE, showContour = TRUE, showPoints = FALSE) + drawEndLocs(successful = "Both", player = "Keep All", scoring = FALSE, showContour = TRUE, showPoints = FALSE)
```

## Teams Attempt Farther Throws During the End of Close Games

::: center
```{r, fig.width=8, fig.height=5,fig.align='center'}
ufa_throws %>% filter(score_diff%in% -4:4) %>% filter(game_quarter%in% 1:4) %>% ggplot(aes(x=game_quarter,y=score_diff, fill = throw_distance))+
  geom_tile() + scale_fill_gradientn(colors = brewer.pal(9, "Blues"), name= "Throw Distance") + theme_classic() + 
  xlab("Quarter") + ylab("Score Difference")
```
:::

## Team Archetypes Using k-Means Clustering {.smaller}


```{r}
#PCA
pca_avg_ufa_throws <- ufa_throws |>
  mutate(throw_team = ifelse(is_home_team, home_teamID, away_teamID)) |> 
  filter(!throw_team %in% c("allstars1", "allstars2")) |>
  group_by(throw_team) |>
  summarize(avg_x_diff = mean(x_diff), avg_y_diff = mean(y_diff), avg_throw_angle = mean(throw_angle * 180/pi), avg_goals_per_throw = mean(goal), avg_to_per_throw = mean(turnover)) |> 
  mutate(
    std_avg_x_diff = as.numeric(scale(avg_x_diff, center = TRUE, scale = TRUE)),
    std_avg_y_diff = as.numeric(scale(avg_y_diff, center = TRUE, scale = TRUE)),
    std_avg_throw_angle = as.numeric(scale(avg_throw_angle, center = TRUE, scale = TRUE)),
    std_avg_goals_per_throw = as.numeric(scale(avg_goals_per_throw, center = TRUE, scale = TRUE)),
    std_avg_to_per_throw = as.numeric(scale(avg_to_per_throw, center = TRUE, scale = TRUE))
  )

diff_pca_avg_ufa_throws <- pca_avg_ufa_throws |>
  select(std_avg_x_diff:std_avg_y_diff:std_avg_throw_angle:std_avg_goals_per_throw:std_avg_to_per_throw) |>
  prcomp(center = TRUE , scale. = TRUE)

ufa_pc_matrix <- diff_pca_avg_ufa_throws$x
avg_ufa_throws <- ufa_throws |>
  mutate(throw_team = ifelse(is_home_team, home_teamID, away_teamID)) |> 
  filter(!throw_team %in% c("allstars1", "allstars2")) |>
  group_by(throw_team) |>
  summarize(avg_x_diff = mean(x_diff), avg_y_diff = mean(y_diff), avg_throw_angle = mean(throw_angle * 180/pi))

diff_avg_ufa_throws_pca <- avg_ufa_throws |> 
  mutate(pc1 = ufa_pc_matrix[,1], 
         pc2 = ufa_pc_matrix[,2])

#diff_avg_ufa_throws_pca |> 
#  ggplot(aes(x = pc1, y = pc2)) +
#  geom_point(alpha = 0.5) +
#  labs(x = "PC 1", y = "PC 2")


# fviz_pca_var(): projection of variables
# fviz_pca_ind(): display observations with first two PCs
rownames(diff_pca_avg_ufa_throws$rotation) <- c("Mean Throw Change in X", "Mean Throw Change in Y", "Mean Throw Angle", "Goals Per Throw", "Turnovers Per Throw")
biplot <- diff_pca_avg_ufa_throws |> 
  fviz_pca_biplot(label = "var",
                  alpha.ind = 0.25,
                  alpha.var = 0.75,
                  labelsize = 5,
                  col.var = "navy",
                  repel = TRUE) 
```

```{r}
#Gap Method to Find K-Clusters
ufa_kmeans_gap_stat <- diff_avg_ufa_throws_pca |> 
  select(pc1,pc2) |> 
  clusGap(FUN = kmeans, nstart = 30, K.max = 10)
#Clustering From PCA
init_kmeans <- diff_avg_ufa_throws_pca |> 
  select(pc1, pc2) |> 
  kmeans(algorithm = "Lloyd", centers = 6, nstart = 1)

pca_plot <- diff_avg_ufa_throws_pca |>
  mutate(
    diff_avg_throw_clusters = as.factor(init_kmeans$cluster)
  ) |>
  ggplot(aes(x = pc1, y = pc2, color = diff_avg_throw_clusters)) +
  geom_point(size = 2) + scale_color_brewer(palette = "Dark2") +
  labs(title = "PCA Cluster Plot", x = "PC1", y = "PC2", colour = "Clusters") +
  geom_text_repel(aes(label = throw_team)) + theme(legend.position = "bottom")  
pca_plot + biplot
```

## Discussion {.smaller}

::: fragment
-   **Conclusions**
    -   Tendency to throw towards middle, except for scoring attempts
    -   Teams throw deeper during the ends of close matches
:::

::: fragment
-   **Limitations**
    -   Uncertainty of end locations around failed passes
    -   Inconsistent rules across leagues - difficult to interpret across the sport
:::

::: fragment
-   **Future Work**
    -   Examining throwing tendencies per player
    -   Determining changes in tendences across years
:::

## Appendix - End Location Shiny App

<https://louzhou.shinyapps.io/ufa_endlocations/>
